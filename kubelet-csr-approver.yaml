package:
  name: kubelet-csr-approver
  version: "1.2.10"
  epoch: 0
  description: Kubernetes controller to enable automatic kubelet CSR validation after a series of (configurable) security checks
  copyright:
    - license: MIT

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/postfinance/kubelet-csr-approver
      tag: v${{package.version}}
      expected-commit: fabca038b8165aebc7ee62d3019fa67b37b972a3

  - uses: go/build
    with:
      packages: ./cmd/kubelet-csr-approver/
      tags: debug
      ldflags: |
        -X github.com/postfinance/kubelet-csr-approver/internal/cmd.commit=$(git rev-parse HEAD)
        -X github.com/postfinance/kubelet-csr-approver/internal/cmd.ref=$(git rev-parse --abbrev-ref HEAD)
      output: kubelet-csr-approver

subpackages:
  - name: ${{package.name}}-compat
    description: "Compatibility package to place binary in the location expected by kubelet-csr-approver "
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/ko-app
          ln -sf /usr/bin/kubelet-csr-approver ${{targets.contextdir}}/ko-app/kubelet-csr-approver

update:
  enabled: true
  github:
    identifier: postfinance/kubelet-csr-approver
    strip-prefix: v

test:
  environment:
    environment:
      KUBERNETES_SERVICE_HOST: "127.0.0.1"
      KUBERNETES_SERVICE_PORT: 32764
    contents:
      packages:
        - kubectl
        - openssl
        - wait-for-it
  pipeline:
    - name: Verify kubelet-csr-approver installation
      runs: |
        kubelet-csr-approver --help
    - uses: test/kwok/cluster
    - name: Setup RBAC for kubelet-csr-approver
      runs: |
        # Create namespace for testing
        kubectl create namespace kube-system --dry-run=client -o yaml | kubectl apply -f -

        # Create service account and RBAC for kubelet-csr-approver
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: kubelet-csr-approver
          namespace: kube-system
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: kubelet-csr-approver
        rules:
        - apiGroups: ["certificates.k8s.io"]
          resources: ["certificatesigningrequests"]
          verbs: ["get", "list", "watch"]
        - apiGroups: ["certificates.k8s.io"]
          resources: ["certificatesigningrequests/approval"]
          verbs: ["update"]
        - apiGroups: ["certificates.k8s.io"]
          resources: ["signers"]
          resourceNames: ["kubernetes.io/kubelet-serving"]
          verbs: ["approve"]
        - apiGroups: [""]
          resources: ["events"]
          verbs: ["create", "patch"]
        - apiGroups: [""]
          resources: ["nodes"]
          verbs: ["get", "list"]
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: kubelet-csr-approver
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: kubelet-csr-approver
        subjects:
        - kind: ServiceAccount
          name: kubelet-csr-approver
          namespace: kube-system
        EOF

        # Create service account token
        mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
        CA=$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority}')
        cp $CA /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        kubectl -n kube-system create token kubelet-csr-approver > /var/run/secrets/kubernetes.io/serviceaccount/token
    - name: Start kubelet-csr-approver controller
      runs: |
        # Start the controller in the background with test configuration
        kubelet-csr-approver \
          --provider-regex='^test-node-.*' \
          --max-expiration-sec=86400 \
          --bypass-dns-resolution \
          --log-level=5 > /tmp/kubelet-csr-approver.log 2>&1 &
        CSR_PID=$!

        # Wait for controller to be ready
        sleep 5

        # Check if process is still running
        if ! kill -0 $CSR_PID 2>/dev/null; then
          echo "kubelet-csr-approver failed to start. Logs:"
          cat /tmp/kubelet-csr-approver.log
          exit 1
        fi

        echo "kubelet-csr-approver started successfully with PID $CSR_PID"
    - name: Create test CSR that should be approved
      runs: |
        # Generate a private key and CSR for a test node
        openssl genrsa -out /tmp/test-node.key 2048
        openssl req -new -key /tmp/test-node.key -out /tmp/test-node.csr -subj "/CN=system:node:test-node-001" \
          -addext "subjectAltName = DNS:test-node-001,IP:10.0.0.1"

        # Create the CSR resource
        cat <<EOF | kubectl apply -f -
        apiVersion: certificates.k8s.io/v1
        kind: CertificateSigningRequest
        metadata:
          name: test-node-csr-valid
        spec:
          request: $(cat /tmp/test-node.csr | base64 | tr -d '\n')
          signerName: kubernetes.io/kubelet-serving
          usages:
          - digital signature
          - key encipherment
          - server auth
          username: system:node:test-node-001
          groups:
          - system:nodes
        EOF

        # Wait for CSR to be processed
        sleep 10

        # Check if CSR was approved
        if kubectl get csr test-node-csr-valid -o jsonpath='{.status.conditions[?(@.type=="Approved")].status}' | grep -q "True"; then
          echo "CSR was correctly approved"
        else
          echo "CSR was not approved. Status:"
          kubectl get csr test-node-csr-valid -o yaml
          echo "Controller logs:"
          cat /tmp/kubelet-csr-approver.log
          exit 1
        fi
    - name: Create test CSR that should NOT be approved
      runs: |
        # Generate a CSR that doesn't match the provider regex
        openssl genrsa -out /tmp/bad-node.key 2048
        openssl req -new -key /tmp/bad-node.key -out /tmp/bad-node.csr -subj "/CN=system:node:bad-node-001" \
          -addext "subjectAltName = DNS:bad-node-001,IP:10.0.0.2"

        # Create the CSR resource
        cat <<EOF | kubectl apply -f -
        apiVersion: certificates.k8s.io/v1
        kind: CertificateSigningRequest
        metadata:
          name: test-node-csr-invalid
        spec:
          request: $(cat /tmp/bad-node.csr | base64 | tr -d '\n')
          signerName: kubernetes.io/kubelet-serving
          usages:
          - digital signature
          - key encipherment
          - server auth
          username: system:node:bad-node-001
          groups:
          - system:nodes
        EOF

        # Wait for CSR to be processed
        sleep 10

        # Check if CSR was denied or left pending
        if kubectl get csr test-node-csr-invalid -o jsonpath='{.status.conditions[?(@.type=="Approved")].status}' | grep -q "True"; then
          echo "ERROR: CSR was incorrectly approved"
          kubectl get csr test-node-csr-invalid -o yaml
          echo "Controller logs:"
          cat /tmp/kubelet-csr-approver.log
          exit 1
        else
          echo "CSR was correctly not approved"
        fi
